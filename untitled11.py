# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_MgpqqBrBxHYh3MaH5T-Cm4uojsCqdRp
"""

!pip install pillow

from PIL import Image
import json
from google.colab import files
import os
import matplotlib.pyplot as plt

# Function to embed data
def embed_data(image_path, output_path, data):
    img = Image.open(image_path)
    binary_data = ''.join(format(ord(i), '08b') for i in data)
    binary_data += '1111111111111110'  # End-of-data marker
    img_data = list(img.getdata())

    if len(binary_data) > len(img_data) * 3:
        raise ValueError("Data too large to hide in the image.")

    new_data = []
    data_index = 0

    for pixel in img_data:
        r, g, b = pixel
        if data_index < len(binary_data):
            r = (r & ~1) | int(binary_data[data_index])
            data_index += 1
        if data_index < len(binary_data):
            g = (g & ~1) | int(binary_data[data_index])
            data_index += 1
        if data_index < len(binary_data):
            b = (b & ~1) | int(binary_data[data_index])
            data_index += 1
        new_data.append((r, g, b))

    img.putdata(new_data)
    img.save(output_path)
    print(f"Data embedded successfully into {output_path}")

# Function to extract data
def extract_data(image_path):
    img = Image.open(image_path)
    img_data = list(img.getdata())

    binary_data = ""
    for pixel in img_data:
        r, g, b = pixel
        binary_data += bin(r)[-1]
        binary_data += bin(g)[-1]
        binary_data += bin(b)[-1]

    all_bytes = [binary_data[i:i+8] for i in range(0, len(binary_data), 8)]
    decoded_data = ""
    for byte in all_bytes:
        if byte == "11111110":  # End-of-data marker
            break
        decoded_data += chr(int(byte, 2))

    print("Extracted Data:", decoded_data)
    return decoded_data

# Function to prepare the medical report
def load_medical_report():
    medical_report = {
        "patient_id": "123456",
        "name": "John Doe",
        "age": 35,
        "gender": "Male",
        "date_of_visit": "2025-06-24",
        "diagnosis": "Hypertension",
        "prescription": [
            {"medicine_name": "Amlodipine", "dosage": "5 mg", "frequency": "Once daily"},
            {"medicine_name": "Hydrochlorothiazide", "dosage": "25 mg", "frequency": "Once daily"}
        ],
        "tests_recommended": ["Blood Pressure Monitoring", "Kidney Function Test"],
        "doctor_notes": "Patient advised to follow a low-sodium diet and regular exercise."
    }
    return json.dumps(medical_report)

# Main Script
if __name__ == "__main__":
    # Step 1: Upload or create an image
    print("Upload your image (input.png):")
    uploaded = files.upload()
    if "input.png" not in uploaded:
        print("Creating a sample image as 'input.png'...")
        sample_image = Image.new('RGB', (300, 300), color='white')
        sample_image.save("input.png")

    # Step 2: Load Medical Data
    medical_data = load_medical_report()

    # Step 3: Embed Data into Image
    input_image = "input.png"
    output_image = "output.png"
    embed_data(input_image, output_image, medical_data)

    # Step 4: Show the image after embedding
    print("Displaying the output image:")
    embedded_image = Image.open(output_image)
    plt.imshow(embedded_image)
    plt.axis('off')  # Hide axes for better visualization
    plt.show()

    # Step 5: Extract Data from Image
    extracted_data = extract_data(output_image)

    # Step 6: Download the output image
    print("Downloading the output image...")
    files.download(output_image)

def visualize_lsb(image_path):
    img = Image.open(image_path)
    img_data = list(img.getdata())
    lsb_image = []

    for pixel in img_data:
        r, g, b = pixel
        lsb_r = (r & 1) * 255  # Extract LSB and scale for visibility
        lsb_g = (g & 1) * 255
        lsb_b = (b & 1) * 255
        lsb_image.append((lsb_r, lsb_g, lsb_b))

    lsb_img = Image.new(img.mode, img.size)
    lsb_img.putdata(lsb_image)
    return lsb_img

# Visualize LSBs
print("Displaying the LSB visualization:")
lsb_visual = visualize_lsb(output_image)
plt.imshow(lsb_visual)
plt.axis('off')
plt.show()